
#1.함수란?
#하나의 특정 작업을 수행하기 위해 독립적으로 설계된 프로그램 코드의 집합을 말함

#--------------------------------------------------------------------

#2.함수를 사용하는 이유는?
# 큰이유는 프로그램내에서 중복적인 코드의 작성을 최소화하고,
# 코드의 재사용성을 높여주기 떄문입니다.

#--------------------------------------------------------------------

#3. 함수 선언하고 호출하기
    #파이썬에서는 파이썬이 제공하는 내장 함수를 그대로 사용하는 것 뿐만 아니라
    #자신만의 함수를 직접 만들어서 사용할수도 있다.

#3-1. 함수 선언 문법
    # def 함수명(매개변수1,...):
    #     실행할 코드1 ....

    #설명 : 함수명은 함수를 호출할떄 사용하기 위한 이름이며,
    #       매개변수는 함수 호출시 전달되는 인수의값을 함수 내부에서 사용할수 있도록 저장할 변수의 이름입니다.

#3-2. 선언된 함수 호출하기 문법
    # 함수명(인수,...)

    #참고! 인수는 함수를 호출할때 함수 내부에서 사용할 데이터를 전달 해주는 역할을 함

#예제1. hello라는 이름의 함수를 선언하고 호출하는 예제
#함수 선언
def hello():
    print("-함수시작-")
    print("-안녕하세요-")
    print("-함수끝")

#함수 호출
hello()
hello()
hello()

#예제2. 두 개의 인수를 전달 받아 그 합을 출력하는 함수 만들기

#sum이라는 이름의 함수를 만들고(선언하고)
def sum(a,b):
    print(a + b)

sum(1,2) # 3출력됨
sum(3,4) # 7출력됨

#4. 값을 반환(return)하는 함수
#파이썬에서는 전달받은 인수를 가지고 함수 내부에서 여러 명령문을 실행한 결과를 return문을 사용하면
#반환할 수 있습니다.
#이러한 return문은  함수의 종료를 의미하며, 함수를 호출한 곳으로 해당 결괏값을 반환해 줍니다.

#문법
#   def 함수명(매개변수):
#       실행할 코드1
#       실행할 코드2
#       ...
#       return 결괏값

#return문을 사용하여 함수에서 반환된 값은 곧바로 변수에 대입하여 사용할수 있습니다
#문법
#변수명 = 함수명(인수)

#예제3. 값을 반환(return)하는 함수를 선언하고 선언한 함수를 호출해 함수가 연산한 결과값을 되돌려 받는 예제
def sum1(a,b):
    print("-함수시작-")
    # return a + b   #<---함수의 연산결과를 리턴하고 함수를 빠져나가므로 아래구문이 실행 되지 않는다.
    print("-함수 끝")
    return a + b

c = sum1(1,2)  # sum1함수의 반환값 3을 c변수에 저장하여 재사용할수 있다.
print(c)

print(sum1(3,4)) #sum1함수의 반환값 7을 변수에 저장하지 않고 print()함수로 바로 출력하고 있다.
                 #하지만 함수의 반환값 7을 단 한번만 사용하여 출력할 수 있으며,
                 #이후에는 해당 결괏값에 접근할 수 없습니다.
#-------------------------------------------------------------------------

#4. 선언된 함수를 호출할때 대입연산자 =를 사용하여 인수가 저장될 매개변수를 직접 지정하면 된다.
#예제4.

def sub(a,b):
    print(a-b)

sub(1,2)  # -1
sub(a=1, b=2)  # -1
sub(b=1, a=2)  # 1
               #인수가 전달되는 순서를 매개변수를 지정하여 직접 변경 하고 있습니다
#---------------------------------------------------------------------------

#5. 함수를 선언할때 미리 매개변수의 기본값을 설정해 놓으면,
#함수 호출시 전달받지 못한 인수에 대해서는 설정해 놓은 기본값으로 자동 초기화 할수 있습니다

#예제5.

def total(a, b=5, c=10):
    print(a + b + c)

total(1) # 16출력됨
total(1,2)  # 13출력됨
total(1,2,3) # 6출력됨

# total(1,2,3,4)
# total(b=2, c=3)
#에러 설명 : 매개변수의 기본값을 설정해도 기본값을 설정하지 않은 매개변수에 인수를 전달하지 않거나
#매개변수의 수보다 많은 인수를 전달하여 함수를 호출하면  TypeError가 발생한다
#--------------------------------------------------------------------------------

#6. 함수를 실제로 호출할 떄 몇개의 인수가 전달될지 미리 알수 없다면,
#  사용자가 직접 매개변수의 개수를 정할 수 있도록 함수를 선언할 수 있습니다

#예제6.
# 선언된 매개변수에는 함수가 호출될때 전달된 모든 인수가 튜플 의 형태로 저장됩니다.
# 가변 매개변수는 함수내에서 반복문을 통해 자유롭게 접근하여 사용할수 있습니다.
def add(*paras):
    print(paras)
    total = 0
    for para in paras: #(10,2)
        total += para
    return total

print(add(10,2))

print(add(10,100,1000))
#-----------------------------------------------------------------------

#7. 가변 매개변수로 딕셔너리를 사용하려면, 하나의 별 * 기호가 아닌  두개의 별 **기호를 사용하여 함수를 선언함

#예제7.
def print_map(**dicts):

    for item in dicts.items():#items()함수는 key와 value의 쌍을 튜플로 묶은 값을 dict_items객체로 돌려준다
        print(item)

print_map(하나=1)
print_map(one=1,two=2)
print_map(하나=1,둘=2,셋=3)
#---------------------------------------------------------------

#8. 함수에서 return문을 통해 반환할수 있는 결괏값은 언제나 하나입니다
# 따라서 두개 이상의 결괏값을 반환하고 싶다면 튜플을 사용해야 합니다

#예제8.
def arith(a,b):
    add = a + b
    sub = a - b
    return add, sub # 반환하고 싶은 모든 결괏값을 하나의 튜플로 만들어 반환할수 있다.

i,j = arith(10,1)
print(i)  # 11
print(j)  # 9
#---------------------------------------------------------------------------------------------

#9. 람다표현식의 개념
# 매개변수로 함수를 전달하기 위해 함수 구문을 작성 하는 것도 번거롭고, 코드의 공간 낭비라는 생각을 하여
# 많은 개발자들이 '간단한 함수를 쉽게 선언 하는 방법'의 식을 만들었는데 이런식을 람다 표현식이라고 부릅니다

#람다(간단한 함수를 쉽게 선언후 호출하는 방법) 문법
# (lambda 매개변수 : 리턴값)(인수1,인수2)

#예제
#함수의 선언과 호출과정
def add(a,b):
    return a + b

print(add(1,2))

#이처럼 람다는 단 한번 만 사용할 함수를 간단하게 선언하고 호출할때 매우 유용하게 사용할수 있다.
print((lambda a,b : a + b)(1,2))

#람다(간단한 함수를 쉽게 선언후 호출하는 방법) 문법
# (lambda 매개변수 : 리턴값)(인수1,인수2)

#람다를 이용해 매개변수가 없는 함수를 정의하고  호출하여  "안녕" 라는 구문이 출력되도록 작성
(lambda  : print("안녕"))()

































































