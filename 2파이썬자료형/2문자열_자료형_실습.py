
# 문자열은 어떻게 만들고 사용할까?

# 1> 문자열을 만드는 방법 총4가지
    # 1. 큰따옴표  "로 양쪽 둘러 싸기
        # 예     "Hello World"
    # 2. 작은따옴표  '로 양쪽 둘러 싸기
        # 예     'Hello World'
    # 3. 큰따옴표  3개  """를 연속적으로 써서 양쪽 둘러 싸기
        # 예     """Hello"""
    # 4. 작은따옴표 3개 '''를 연속적으로 써서 양쪽 둘러 싸기
        # 예     '''Hello'''

# 2> 문자열 안에 작은 따옴표나 큰따옴표를 기호로 포함 시키고 싶을때?
    #1. 문자열에 작은 따옴표 ' 포함 시키기
    #예
food = "Python's good"   # Python's에 작은 따옴표 '를 포함 시키려면
                         # 큰 따옴표 "로 둘러 싸야 한다.
print(food)
    #2. 문자열에 큰따옴표 " 포함 시키기
    #예
say =  '"Pythons" good'  # 문자열 내부에 큰 따옴표를 기호로 표현 하고 싶을때
print(say)               # 문자열 전체의 양쪽을 ? 작은따옴표 ' 로 감싼다.

    #3.작은 따옴표 ' 또는 큰따옴표 " 를 문자열에 포함시키는 또다른 방법은 백슬래시 \를 사용하면 된다.
    # 즉 백슬러시 기호 \를 작은 따옴표 ' 또는 큰 따옴표 " 앞에 삽입 하면
    # 백슬러시 기호 \ 뒤에 작은 따옴표'나 큰따옴표 "는 문자열을 뚤러사는 기호의 의미가 아니라
    # '    "  문자기호 그 자체를 뜻하게 된다.
food = 'has\'s'
print(food)
say = "has\"s"
print(say)

#3> 여러 줄인 문자열을 변수에 대입하는 방법
    #1. 문자열의 줄을 바꾸는 이스케이프 코드  \n 삽입하기
    #예
multiline = "Life is too short\nYou need python"
print(multiline)
    #2. 연속된 작은따옴표 '''3개 또는  큰따옴표 """3개 사용하기
    #작은 따옴표 '''3개를 사용한 경우의 예
multiline = '''
안녕하세요.
반갑습니다.
'''
print(multiline)

    #큰 따옴표 """3개를 사용한 경우의 예
multiline = """
안녕하세요.
어서오세요.
"""
print(multiline)
#---------------------------------------------

# 문자열 연산하기
#1> 문자열 더해서 연결하기
head = "Python"
tail = " is fun!"
print(head + tail)

#2> 문자열 곱하기
a = "python"
print(a * 2) #a변수에 저장된 문자열을 두번 반복해서 연결해라! 라는 뜻이다.

#3> 문자열 곱하기 응용
print("=" * 50)
print("My Program")
print("=" * 50)

#4> 문자열 길이 구하기
#문자열 길이 구하기 -> len함수를 사용하면 구할수 있다.
a = "Life is too short"
b = len(a)
print(b) #문자열의 길이 17출력

#----------------------------------------------------------

#문자열 인덱싱(한문자만? 가리켜 얻는다) 과  슬라이싱(단어를 잘라낸다)

#1> 문자열 인덱싱(한문자만? 가리켜 얻는) 예제
a = "Hello is"
#    01234567   <---전체 문자열중 문자의 위치를 가리키는 번호로 0인덱스 위치부터 센다.
print(a[1])  # 1위치의 문자 e를 얻어 출력
print(a[4])  # 4위치의 문자 0를 얻어 출력

b = "Hello is"
#         -2-1  <---전체 문자열중 뒤에서부터 문자의 위치를 가리킬때 -1부터 센다.
print(b[-1])  # 뒤에서 부터 세면 -1위치의 문자 s를 얻어 출력
print(b[-2])

#2> 문자열 슬라이싱(단어를 잘라낸다) 예제
# 슬라이싱 기본 문법1
# a[시작번호 : 끝번호]   -> a변수에 저장된 문자열 문장에서 시작인덱스위치번호의 문자부터..
                        # 끝인덱스 위치번호 이전까지의 문자 단어를 잘라내어 뽑아낸다.
a = "Hello is"
#    01234567
b = a[0 : 4]  #a변수에 저장된 문자열 문장에서  자리번호 0부터 4위치 이전까지의 단어를 잘라내어 뽑아낸다.
print(b) # Hell출력됨

c = a[3 : 6]
print(c) # lo 출력됨

#슬라이싱 기본 문법 2
#a[시작번호 : 생략]    -> a변수에 저장된 문자열 중에서..
#                       시작 번호부터  그문자열의 끝까지를 잘라내어 뽑아낸다.

a = "Hello is"
#    01234567
c = a[1 : ]
print(c)

#슬라이싱 기본 문법 3
#a[생략 : 끝번호]  -> a변수에 저장된 문자열 중에서..
#                   시작번호를 생략하면 문자열의 처음부터 끝번호 위치 이전까지의 문자열을 잘라내어 뽑아낸다.
a = "Hello is"
#    01234567
c = a[ : 7]
print(c)

#슬라이싱 기본 문법 4
#a[생략 : 생략]  -> a변수에 저장된 문자열 중에서..
#                  시작번호와 끝번호를 모두 생략하면 문자열의 처음부터 끝까지를 잘라내어 뽑아 낸다.
a = "Hello is"
#    01234567
c = a[ : ]
print(c)

#슬라이싱 기법으로 문자열 나누기 응용 예제
a = "20010331Rainy"
#    0123456789...

year = a[ : 4]  #처음부터 a[3]까지의 문자열 '2001'을 잘라내어 변수에 저장
#'0331' 잘라내어 변수에 저장
day = a[4:8]
#'Rainy' 잘라내어 변수에 저장
weather = a[8:]
print(year)
print(day)
print(weather)

#----------------------------------------------------------------------------------
# 문자열 포매팅 이란?
# 문자열 안에 어떤 값을 삽입하는 방법

#1> 문자열 포매팅 따라하기
    #1. 숫자 바로 대입
print("I eat %d apples." %3)  # %d자리에 숫자3을 대입한 전체 문자열 I eat 3 apples. 출력됨
    #2. 문자열 바로 대입
print("I eat %s apples." %"five") # %s자리에  문자열 "five"를 대입 함.
#결론 : 숫자를 넣기 위해서는  %d를 써야 하고, 문자열을 넣기 위해서는 %s를 써야 한다.
    #3. 숫자 값을 나타내는 변수로 대입
number = 3
print("I eat %d apples." %number)
    #4. 문자열에 2개 이상의 값 대입
number = 1
day = "Hello"
   #Hello라고 1번 인사하기
print("%s라고 %d번 인사하기" %(day,number))
#결론 : 2개 이상의 값을 넣으려면 마지막 % 다음 괄호 안에 콤마,로 구분하여 각각의 값을 넣어 주면 된다.

#2> 문자열 포맷코드의 종류
# %s   문자열
# %c   문자1개
# %d   정수
# %f   부동소수
# %o    8진수
# %x    16진수
# %%    (문자 '%' 자체)

#예제
# 정수값을 문자열에 삽입 하려면 %d를 사용하고,
# 실수값을 문자열에 삽입 하려면 %f를 사용 해야 한다.
# 하지만... %s를 사용하면 이런 것을 생각하지 않아도 된다.
# 왜냐 하면 %s는  자동으로 %뒤에 있는 값을 문자열로 자동으로 바꿔서 대입 시켜 주기 떄문이다.
# I have 3 apples 출력
print("I have %s apples" %3)
# rate is 3.234 출력
print("rate is %s" %3.234)

#예제
# 포매팅 연산자  %d와  %를 같이쓸때는  %%를 사용 한다.
# 98%
print("Error is %d%%"  %98)

#3> 포맷 코드와 숫자 함께 사용하기

#1. 정렬과 공백

#예제
# %10s는  전체 길이가 10개인? 문자열 공간에서 공간에서 대입되는 값을 오른쪽으로 정렬 하고
# 그앞의 나머지는 공백으로 남겨 두라는 의미임
print("%10s" %"h1")

#예제
# 'h1'을  전체 문자열에 삽입 할때  왼쪽 정렬 시키고 나머지는 빈공백으로 남겨 두기
print("%-10sjane" %'h1')

#2. 소수점 표현하기
#예제
#3.42134234를 소수점 네번째 자리 까지만 나타내고 싶은 경우~
# .의 의미는 소수점 포인트를 말하고  그 뒤의 숫자4는 소수점 뒤에 나올 숫자의 개수를 말함.
print("%0.4f" %3.42134234)   # 3.4213

#예제
#숫자 3.42134234를 소수점 네번째 자리 까지만 표시하고 전체 길이가 10개인 문자열 공간에서 오른쪽정렬 하기
print("%10.4f" %3.42134234)  #__________3.4213

#3> format함수를 사용한 포매팅
#설명 : 문자열의 format함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다.

#1. 숫자 바로 대입하기
#예제
#"I eat {0} apples"문자열 중에서  {0} 부분을 숫자로 3으로 바꾸기
print("I eat {0} apples".format(3)) # I eat 3 apples 출력됨

#2. 문자열 바로 대입하기
print("I eat {0} apples".format("five")) # I eat five apples 출력됨

#3. 숫자 값이 저장된 변수이름으로 대입 하기
number = 3
print("I eat {0} apples".format(number)) # I eat 3 apples 출력됨

#4. 2개 이상의 값 넣기
#예제
#2개 이상의 값을 넣을 경우 문자열의 {0} ,{1} 과 같은 인덱스 항목이  format함수의 입력값으로
#순서에 맞게 바뀐다.
#{0}은  format함수의 첫번째 입력값인 number변수에 저장된 값으로 바뀌고
#{1}은 format함수의 두번째 입력값인 day변수에 저장된 값으로 바뀐다.
number = 10
day = "세계"
a = "Hello {0}번 외치고 {1}여행 가자{2}".format(number,day,"하하하")
print(a)

#5. {0},{1}과 같은 인덱스 항목 대신 더 편리한 {name}형태로 값 넣기
#   {name}형태를 사용할 경우 format()함수에는 반드시  name=value와 같은 형태의 입력값이 있어야만 한다.
#예제
print("안녕하세요! {a}! 잘{b}드립니다.".format(a="여러분",b="부탁"))

#6. 왼쪽 정렬
#예제
# :<10 표현식을 사용하면 치환되는 문자열을 왼쪽정렬하고
# 문자열의 총 자릿수를 10으로 맞출수 있다.
print("{0:<10}".format("h1"))   #h1________

#7. 오른쪽 정렬
#예제
#오른쪽 정렬은  :< 대신  :>사용 하면 된다.
#화살표 방향을 생각하면 어느쪾으로 정렬되는지 바로 알수 있을 것이다.
print("{0:>10}".format("h1"))

#8. 가운데 정렬
#예제
#  :^ 기호를 사용하여 가운데 정렬 하여 삽입할수 있다.
print("{0:^10}".format("h1"))

#9. 정렬시 공백 문자 대신에 지정한 문자값으로 채워 넣기
#주의할점은  채워 넣을 문자 값은  정렬 문자  <   >   ^ 바로 앞에 넣어야 합니다.
#예제
#가운데 ^로 정렬하고  빈 공간을  = 문자로 채워서 새로운 h1데이터를 삽입
print("{0:=^10}".format("h1"))

#예제
#왼쪽 < 으로 정렬하고  빈 공간을  ! 문자로 채워서 새로운 hi데이터를 삽입
print("{0:!<10}".format("hi"))

#10. 소수점 표현하기
#예제
#format함수를 사용해 소수점을 4자리 까지만 표현 하면서 대이터 삽입
y = 3.42134234
print("{0:0.4f}".format(y)) # 3.4213출력됨

#11. {  또는  }  문자 표현하기
# format함수를 사용해 문자열 포매팅 할 경우
# {}와 같은 중괄호 문자를 포매팅 문자가 아닌 문자 그대로 사용하고 싶은 경우
# {{}} 처럼 2개를 연속해서 사용하면 됨
#예제
print("{{and}}".format())  # {and}

#12.  f 문자열 포매팅
#파이썬 3.6버전 부터 f문자열 포매팅 기능을 사용 할수 있다.
#예제
#f 문자열 포매팅은 name, age변수 값을 생성 한 후에 그값을 참조 할수 있다.
name = '홍길동'
age  = 30
print(f'나의 이름은 {name}입니다. 나이는 {age}입니다.')
print(f'나는 내년이면 {age+1}살이 된다.')

#예제
#format함수 또는  f문자열 포매팅을 사용해   "!!!python!!!"문자열을 출력 해보자

#format함수 사용
print("{0:!^12}".format('python'))

#f문자열로 포매팅
print(f'{"python":!^12}')


#4> 문자열 관련 함수

#1. 문자 개수 세기
# 문자열 자료형은 자체적으로 함수를 가지고 있다.
#이들 함수를 다른 말로 문자열 내장 함수라 한다.
#이 내장 함수를 사용하려면 문자열 변수 이름뒤에  .를 붙인 다음 함수이름을 써주면 된다.

#예제
#문자열 중  문자 b의 개수 되돌려 받기
a = "hobby"
print( a.count('b')  )# 2개

#2. 전체 문자열 중에서  문자 또는  문자열의 시작 인덱스 위치 알려 주기 1

#예제
#문자열 중 문자가 처음으로 나온 문자의 인덱스 위치 되돌려 받기
#만약 찾는 문자나 문자열이 존재하지 않는다면 -1을 되돌려 받기
a = "Hello World"
#    01234
b = a.find('H')  # H 문자의 인덱스 위치 0
print(b)
c = a.find('V')  # V문자가 존재 하지 않으므로  -1을 되돌려 받는다.
print(c)

#2. 전체 문자열 중에서 문자 또는 문자열의 시작인덱스 위치 알려주기 2

#예제
a = "Life is too short"
#    012345678910.....
#문자열 중 문자t가 맨 처음으로 나온 인덱스 위치를 반환 한다.
print(a.index('t'))  # 8
#만약 찾는 문자나 문자열이 존재하지 않는다면  오류를 발생 시킴
# print(a.index('A')) #오류 발생

#3. 문자열 삽입

#예제
#join함수는 문자열  abcd문자열의 각각의 문자 사이에  ,를 삽입 한다
print(",".join('abcd'))  # a,b,c,d

#4. 소문자를 대문자로 바꾸기
#예제
#upper함수는 소문자를 대문자로 바꾸어 준다.
#만약 문자열이 이미 대문자라면  아무 변화도 일어나지 않을 것이다.
f = "hi"
g = f.upper()
print(g)

#5. 대문자를 소문자로 바꾸기
#예제
#lower함수는 대문자를 소문자로 바꾸어 준다.
a = "HI"
b = a.lower()
print(b)

#6. 왼쪽 공백 지우기
# lstrip() 함수
# 문자열 중 가장 왼쪽에 있는 한 칸이상의 연속된 공백들을 모두 지운다.
# lstrip에서  l은 left를 의미 한다.

#예제
a = "  hi  "
print(a.lstrip())

#7. 오른쪽 공백 지우기
#rstrip() 함수
#문자열 중 가장 오른쪽에 있는 한칸 이상의 연속된 공백들을 모두 지운다.
a = "    hi     "
print(a.rstrip())

#8. 양쪽 공백 지우기
#strip()함수
#문자열 양쪾에 있는 한칸 이상의 연속된 공백을 모두 지운다.
a = "    hi    "
print(a.strip())

#9.문자열 바꾸기
# replace(바뀌게될 문자열, 바꿀 문자열) 함수

#예제
a = "A B C"
print(a.replace("A","B"))  #B B C

#10. 문자열 나누기
#split 함수는  a.split() 처럼 ()괄호 안에 아무값도 넣어 주지 않으면
#공백(스페이스,탭,엔터)을 기준으로 문자열을 나누어 준다.
#만약  b.split(':') 처럼 ()괄호 안에 특정 값이 있을 경우에는 괄호 안의 기호 : 구분자 기호를 이용해
#문자열을 나누어 준다. 이렇게 나눈 값은 배열(리스트)에 나눈 값을 하나씩 저장하여 리스트를 되돌려 준다.

#예제
a = "Life is too short"
b = a.split()  # 공백을 기준으로 문자열들을 나누어서 각각 []<--리스트에 담아 []리스트를 반환한다.
print(b) # ['Life', 'is', 'too', 'short'] 리스트를 반환 받아 출력 됨

b = "a:b:c:d"
c = b.split(':')  #  : 기호를 기준으로  문자열을 나눔
                  #  나눈 문자열들은  새로운 []리스트 배열  메모리 공간에 각 요소값으로 저장 됩니다.
                  #  [] 리스트 자체를 반환 받습니다.
print(c) # ['a', 'b', 'c', 'd'] 리스트를 반환 받아 출력됨































































































