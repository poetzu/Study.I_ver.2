
#집합 자료형 이란?
#집합은 파이썬2.3버전 부터 지원하기 시작한 자료형으로,
#집합에 관련된 것을 쉽게 처리 하기 위해 만든 자료형이다.

#집합 자료형은 어떻게 만들까?
#정답 : set키워드를 사용해 만들수 있다.
#예
s1 = set([1,2,3])  # set()의 괄호 안에 리스트를 입력하여 만든다
print(s1)  # {1, 2, 3} 출력됨
#예
s2 = set("Hello") #set()의 괄호 안에 문자열을 입력하여 만들 수도 있다.
print(s2)  # {'l', 'H', 'e', 'o'} 출력됨
# "Hello" 문자열로 set자료형을 만들었는데 생성된 자료형에는 l 문자가 하나 빠져 있고
#순서도 뒤죽박죽 이다. 그이유는 set자료형에 다음과 같은 2가지 큰 특징이 있기 떄문이다.

#집합 자료형의 특징 2가지
#1. 중복을 허용 하지 않는다.
#2. 순서가 없다.

#set자료형에 저장된 값을 인덱싱으로 접근하려면
#리스트나 튜플로 변환한 후에 해야 한다
s1 = set([1,2,3])
print(s1)
l1 = list(s1)   # <----집합 을 리스트로 변환
print(l1) # {1,2,3}집합(set)자료형을  ->  [1,2,3]리스트 자료형으로 변환 해줌
print(l1[0]) # 리스트의 0번쨰 인덱스 위치의 값 1을 얻어 출력

t1 = tuple(s1) # <-----집합을 튜플로 변환
print(t1)   # (1,2,3)튜플 출력
print(t1[0]) #튜플의 0번째 인덱스 위치의 값 1을 얻어 출력

#set집합자료형을 유용하게 사용하는 경우는 교집합, 합집합, 차집합을 구할떄이다.
s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])

#s1과s2의 교집합 구하기
# & 기호를 사용하면 교집합을 간단히 구할 수 있다.
print(s1 & s2)  # {4, 5, 6} 출력됨
# intersection함수를 사용해도 교집합을 간단히 구할 수 있다.
print(s1.intersection(s2))  # {4, 5, 6} 출력됨

#s1과 s2 합집합 구하기
# | 기호 또는 union함수를 사용하면 합집합을 구할 수 있다.
print(s1 | s2)  # {1, 2, 3, 4, 5, 6, 7, 8, 9}
print(s1.union(s2))  # {1, 2, 3, 4, 5, 6, 7, 8, 9}

#s1과 s2 차집합 구하기
# s1 = set([1,2,3,4,5,6])
# s2 = set([4,5,6,7,8,9])

# - 기호 또는 difference함수를 사용하면 차집합을 구할 수 있다.
print(s1 - s2)  # {1,2,3}
print(s2 - s1)  # {8, 9, 7}
print(s1.difference(s2)) #{1, 2, 3}
print(s2.difference(s1)) # {8, 9, 7}

#집합 자료형 관련 함수
#이미 만들어져 있는 set자료형에 값을 추가할수 있다.

#1개의 값만 집합에 추가하는 경우에는 add함수를 사용한다.
s1 = set([1,2,3])  # {1,2,3}집합
s1.add(4)
print(s1)  # {1, 2, 3, 4}

#여러개의 값을 집합에 추가 하는 경우에는 update함수를 사용 한다.
s1 = set([1,2,3]) # {1,2,3}  집합
s1.update([4,5,6]) #{1,2,3,4,5,6} 집합
print(s1)

#집합에 저장된 특정 값 제거시~  remove함수 사용
s1 = set([1,2,3]) # {1,2,3} 집합
s1.remove(2)  # {1,3}
print(s1)














