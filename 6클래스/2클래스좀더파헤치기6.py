
#주제 : 가비지 컬렉터에 대해...

#스왑? 프로그램에 내부에 무엇인가를 생성한다는 것은 메모리 위에 올린다는 의미입니다.
#참고로 메모리가 부족해지면  컴퓨터는 하드디스크를 메모리처럼 사용해 무엇인가를 올리기 시작합니다
#이런 동작을 스왑이라고 하는데..  하드디스크는 메모리보다 훨씬 느리므로 스왑을 처리하는 속도도 느립니다

#가비지컬렉터?
#가비지 컬렉터는 더 사용할 가능성이 없는 데이터를 메모리에서 제거하는 역할을 합니다
#예) 선언한 변수에 값이 저장되지 않았을때 변수 메모리를 제거 하는 경우를 말합니다

#예제1. 변수에 값을 저장하지 않고 인스턴스를 생성하여 사용하는 경우 출력 결과를 보자
class Test:

    #인스턴스 생성시 호출되는 생성자
    def __init__(self,name):
        self.name = name
        print("{} - 생성되었습니다".format(self.name))

    #가비지 컬렉터에 의해 호출되는 소멸자
    def __del__(self):
        print("{} - 파괴되었습니다.".format(self.name))
#---------------------------------------------------------------
Test("Test(A)")  #인스턴스 생성후 변수에 저장 하지 않음
Test("Test(B)")  #인스턴스 생성후 변수에 저장 하지 않음

#결론 : Test(A)가 생성되고 다음줄로 넘어갈 때
#이것을 변수에 저장 하지 않으면 가비지컬렉터는 이후에 활용하지 않겠다는 의미로 이해하고,
#메모리를 아끼기 위해 과감히 지워 버립니다. 따라서 Test(A)가 생성 되고,
#사용되지 않을 것이 확실하므로  Test(A)를 제거해서 소멸합니다

print("-----------------------------------")

#예제2. 인스턴스를 생성 하여 변수에 값을 저장하고 사용하는 경우 출력 결과를 보자.
class Test:

    #인스턴스 생성시 호출되는 생성자
    def __init__(self,name):
        self.name = name
        print("{} - 생성되었습니다".format(self.name))

    #가비지 컬렉터에 의해 호출되는 소멸자
    def __del__(self):
        print("{} - 파괴되었습니다.".format(self.name))
#---------------------------------------------------------------
a = Test("A")  #인스턴스 생성후 변수에 저장한 경우
b = Test("B")  #인스턴스 생성후 변수에 저장한 경우
c = Test("C")

#결론 : 인스턴스 생성후 변수에 저장한 경우  프로그램이 종료되는 순간까지 데이터를 메모리에서 제거 하지 않습니다
# 따라서 A 생성, B생성,  C생성 후에 ~~ 프로그램이 종료될때  A파괴 , B파과, C파괴가 일어납니다


