
#for문
#반복해서 문장을 수행해야 할경우 for문을 사용한다

#for문의 기본구조
    # for 변수 in 튜플 또는 문자열 또는 리스트:
    #     반복 수행 할 문장1
    #     반복 수행 할 문장2
    #     .....
#설명 : 리스트나 튜플, 문자열의 첫번째 요소부터 마지막 요소가지 차례대로 변수에 대입되어
#       반복 수행 할 문장1,  반복 수행 할 문장2 등이 수행 된다.

#예제1. for문 이해하기
test_list = ['one','two','three']  #리스트 선언

#test_list변수에 저장된 리스트 요소의 갯수만큼 반복 하는데..
#리스트의 첫 번째 요소인 'one'이 먼저 i변수에 대입된 후
for i in test_list:
    #i변수값을 출력 함.
    #리스트의 마지막요소까지 이일을 반복한다.
    print(i)
# one
# two
# three

#예제2. 다양한 for문 사용
a =  [(1,2),(3,4),(5,6)] # a리스트의 요솟값을 튜플로 저장

#a리스트의 요소들의 갯수만큼 반복하는데.. 인덱스 위치0의 (1,2)부터  for(first,last)변수자리에 각각 대입된다
for(first, last) in a:
    print(first,last)

#예제3. for문의 응용
#시나리오 : 총 5명의 학생이 시험을 보았는데 시험 점수가 60점이 넘으면 합격이고 그렇지 않으면 불합격이다
#합격인지 불합격인지 결과를 보여주시오.

#문제 : 점수를 차례로 검사해서 합격했는지  불합격했는지 통보해 주는 프로그램을 만들어 보자.

#학생 5명의 시험 점수를 리스트에 저장
marks = [90, 25, 67, 45, 80]
#각각의 학생에게 번호를 붙여 주기 위해 number변수를 사용함
number = 0
for mark in marks: #90, 25, 67, 45, 80을 순서대로 mark변수에 대입하게 된다
    #학생 번호 부여
    number = number + 1
    if mark >= 60:
        print("%d번 학생은 합격입니다" %number)
    else:
        print("%d번 학생은 불합격입니다" %number)

#예제4. for문과  continue문을 사용
#문제 : 예제3을 그대로 사용해 60점 이상인 사람에게는 축하 메세지를 보내고
# 나머지 사람에게는 아무 메세지도 전하지 않는 프로그램을 작성 하자

#학생 5명 시험점수를 리스트에 저장
marks = [90, 25, 67, 45, 80]
#각각 학생의 번호를 붙여 주기 위한 변수
number = 0

for mark in marks: # [90, 25, 67, 45, 80]
    number = number + 1 #학생 번호 생성
    #60점 미만인 학생은 continue문을 만나서 for문의 처음으로 돌아게 하기
    if mark < 60: continue
    print("%d번 학생 축하합니다. 합격입니다." %number)


#예제5. for문과 함께 자주 사용하는 range함수
#range함수는 숫자 리스트를 자동으로 만들어 주는 역할한다.
#range(시작숫자,끝숫자) 형태로 사용하는데, 이때 끝숫자는 포함되지 않는다

a = range(10)  #range(10)은 0부터 10미만의 숫자를 포함하는 range객체를 만들어 준다
print(a)  # range(0,10) <--- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

#예제6. for와 range함수를 사용하면 1부터 10까지 더하는 코드를 구현할수 있다.
add = 0
for i in range(1,11): # [1,2,3,4,5,6,7,8,9,10]
    add = add + i
print(add)

#예제7. for문과  range함수를 사용하면 소스 코드 단~~~ 4줄만으로 구구단을 출력할수 있다.
for i in range(2,10): #[2,3,4,5,6,7,8,9] <-- 단수    1번 for문
    for j in range(1,10): #[1,2,3,4,5,6,7,8,9] <--각단의 곱하는수  2번 for문
        print(i*j,end=" ")
    print('')

#설명: 1번 for문에서 2부터 9까지의 숫자 (range(2,10))가 차례대로 i변수에 대입 된다.
#i변수값이 처음 2일때 2번for문을 만나게 된다. 2번 for문에서 1부터 9까지의 숫자(range(1,10))가 j변수에 대입되고
#그 다음 문장 print(i*j, end=" ")을 수행 하게 된다.
#그리고 end=" "를 넣어 준 이유는 해당 결과 값을 출력할떄 다음줄로 넘기지 않고 그줄에 빈공백을 주어
#계속해서 출력하기 위해서이다.


#for 반복문과 딕셔너리 함께 사용하기

#for key를 저장할 변수 in 딕셔너리:
#   코드

#예제
#딕셔너리를 선언 합니다
dictionary = {"name":"7D 건조 망고",
              "type":"당절임",
              "ingredient":["망고","설탕","메타중아황산나트륨","치자황생소"],
              "origin":"필리핀"
              }
#for 반복문을 사용합니다
for key in dictionary:
    #출력합니다
    print(key, ":", dictionary[key])






































































